@{
    ViewData["Title"] = "Home Page";
}

<div class="landing-page">
    <!-- Main Content -->
    <div class="main-content">
        <!-- Text Section -->
        <div class="text-section">
            <h1>Your Gateway to Endless Reading Adventures</h1>
            <p>
                Welcome to eBook Library, a platform designed for book lovers! Discover, borrow, or purchase books from our extensive collection.
            </p>
            <p>Share your thoughts by rating books and explore feedback from other readers to find your next favorite read.</p>
            <p>What are you waiting for? Search for your next book now!
            </p>
            <div class="search-bar">
                <form asp-area="" asp-controller="Library" asp-action="BookGallery" method="get">
                    <input type="text" name="searchQuery" class="search-input" placeholder="Search 25+ books" />
                    <button type="submit" class="btn-search">Search</button>
                </form>
            </div>
        </div>

        <!-- Image Section -->
        <div class="image-section">
            <img src="~/images/LandingPage.png" alt="Reading a Book" class="landing-image" />
        </div>
    </div>
</div>

<!-- Additional Section -->
<div class="additional-section">
    <div class="row">
        <!-- Left Image Section -->
        <div class="col-md-6">
            <img src="~/images/LandingPage2.jpg" alt="Rent a Book" class="additional-image" />
        </div>
        <!-- Right Text Section -->
        <div class="col-md-6 text-content">
            <h2>Rent your favourite book from our library</h2>
            <p>
                Buying a book is not necessary for reading a book. You can rent a book for minimal costs which would be
                contributed to the respective author of the book.
            </p>
        </div>
    </div>
</div>

<!-- Purchase Section -->
<div class="additional-section">
    <div class="row">
        <!-- Right Text Section -->
        <div class="col-md-6 text-content">
            <h2>Purchase your favourite books</h2>
            <p>
                Owning a book has never been easier! Purchase your favorite books and build a personal library
                that stays with you forever. Enjoy exclusive offers and discounts for our members.
            </p>
            <a asp-area="" asp-controller="Library" asp-action="BookGallery" class="btn-browse-books">Browse Books</a>
        </div>
        <!-- Left Image Section -->
        <div class="col-md-6">
            <img src="~/images/PurchaseBook.png" alt="Purchase a Book" class="additional-image" />
        </div>
    </div>
</div>

<!-- Community Section -->
<div class="community-section">
    <h3 class="text-center mb-4">Community Feedback</h3>

    <div class="feedback-container">
        <button class="nav-btn prev-btn" onclick="moveSlide(-1)">&lt;</button>
        <div class="feedback-slider">
            <div class="feedback-track" id="feedbackTrack">
                @if (ViewData["WebSiteFeedbacks"] != null)
                {
                    var feedbacks = (List<WebApplication2.Models.WebSiteFeedback>)ViewData["WebSiteFeedbacks"];
                    foreach (var feedback in feedbacks)
                    {
                        <div class="feedback-card" id="feedback-@feedback.Id">
                            @if (User.IsInRole("Admin"))
                            {
                                <button type="button" class="delete-feedback-btn btn btn-danger btn-sm"
                                        data-id="@feedback.Id" title="Delete Feedback">
                                    &times;
                                </button>
                            }
                            <h5>@feedback.Name</h5>
                            <p>Rating: @feedback.Rating/5</p>
                            <p>@feedback.Comment</p>
                        </div>
                    }
                }
            </div>
        </div>
        <button class="nav-btn next-btn" onclick="moveSlide(1)">&gt;</button>
    </div>
</div>


    <!-- Feedback Form -->
<div class="feedback-box">

    <div class="feedback-form">
        <h3>Rate Our Website</h3>
        <form method="post" asp-controller="Home" asp-action="SubmitWebSiteFeedback">
            <div class="mb-3">
                <label for="name" class="form-label">Your Name</label>
                <input type="text" id="name" name="name" class="form-control small-input" required>
            </div>
            <div class="mb-3">
                <label class="form-label">Rating</label>
                <div class="rating-stars">
                    <input type="radio" id="star5" name="rating" value="5">
                    <label for="star5" title="5 stars"></label>
                    <input type="radio" id="star4" name="rating" value="4">
                    <label for="star4" title="4 stars"></label>
                    <input type="radio" id="star3" name="rating" value="3">
                    <label for="star3" title="3 stars"></label>
                    <input type="radio" id="star2" name="rating" value="2">
                    <label for="star2" title="2 stars"></label>
                    <input type="radio" id="star1" name="rating" value="1" required>
                    <label for="star1" title="1 star"></label>
                </div>
            </div>
            <div class="mb-3">
                <label for="comment" class="form-label">Comment</label>
                <textarea id="comment" name="comment" class="form-control small-input" rows="3" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Submit Feedback</button>
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const deleteButtons = document.querySelectorAll(".delete-feedback-btn");

        deleteButtons.forEach(button => {
            button.addEventListener("click", () => {
                const feedbackId = parseInt(button.getAttribute("data-id"), 10);

                if (!feedbackId || isNaN(feedbackId)) {
                    alert("Invalid feedback ID.");
                    return;
                }

                if (confirm("Are you sure you want to delete this feedback?")) {
                    fetch("/Home/DeleteWebSiteFeedback", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(feedbackId) // Send ID as raw integer
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById(`feedback-${feedbackId}`).remove();
                            alert("Feedback deleted successfully!");
                        } else {
                            alert(data.message || "An error occurred while deleting feedback.");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("An error occurred while deleting feedback.");
                    });
                }
            });
        });
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const track = document.getElementById('feedbackTrack');
        const cards = track.getElementsByClassName('feedback-card');
        const prevBtn = document.querySelector('.prev-btn');
        const nextBtn = document.querySelector('.next-btn');
        let currentIndex = 0;

        // Show/hide navigation buttons based on feedback count
        if (cards.length > 3) {
            prevBtn.style.display = 'block';
            nextBtn.style.display = 'block';
        }

        window.moveSlide = function(direction) {
            const cardsPerView = 3;
            const maxIndex = Math.max(0, cards.length - cardsPerView);

            currentIndex += direction;

            // Handle bounds
            if (currentIndex < 0) currentIndex = 0;
            if (currentIndex > maxIndex) currentIndex = maxIndex;

            // Calculate the translation
            const translation = currentIndex * -((100 / cardsPerView) + (20 * 100 / track.offsetWidth));
            track.style.transform = `translateX(${translation}%)`;

            // Update button states
            prevBtn.disabled = currentIndex === 0;
            nextBtn.disabled = currentIndex === maxIndex;
        }

        // Keep the existing delete functionality
        const deleteButtons = document.querySelectorAll(".delete-feedback-btn");
        deleteButtons.forEach(button => {
            button.addEventListener("click", () => {
                const feedbackId = parseInt(button.getAttribute("data-id"), 10);

                if (!feedbackId || isNaN(feedbackId)) {
                    alert("Invalid feedback ID.");
                    return;
                }

                if (confirm("Are you sure you want to delete this feedback?")) {
                    fetch("/Home/DeleteWebSiteFeedback", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(feedbackId)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const card = document.getElementById(`feedback-${feedbackId}`);
                            card.remove();

                            // Recalculate navigation visibility
                            const remainingCards = track.getElementsByClassName('feedback-card');
                            if (remainingCards.length <= 3) {
                                prevBtn.style.display = 'none';
                                nextBtn.style.display = 'none';
                            }

                            alert("Feedback deleted successfully!");
                        } else {
                            alert(data.message || "An error occurred while deleting feedback.");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("An error occurred while deleting feedback.");
                    });
                }
            });
        });
    });
</script>

<style>
    .feedback-box {
        border-radius: 10px;
        background-color: #222222;
        padding: 20px;
        margin: 20px auto;
        max-width: 800px;
        box-shadow: 0 0 15px 5px rgba(0, 0, 0, 0.5);
    }


        /* Normalize headers */
    h1 {
        font-size: 2.5rem;
        font-weight: bold;
    }

    h2 {
        font-size: 2rem; 
        font-weight: bold;
        margin-bottom: 20px;
    }

    .feedback-form h3 {
        margin-bottom: 3.5rem;
    }

    /* Normalize paragraph text */
    p {
        font-size: 1.2rem; 
        line-height: 1.5;
        margin-bottom: 15px;
    }

    .landing-page {
        background-color: #121212;
        color: #ffffff;
        width: 100vw; 
        max-width: 100%;
        margin: 1000; 
        padding: 0; 
        display: flex; 
        flex-direction: column;
    }

    .main-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%; 
        padding: 20px; 
        box-sizing: border-box; 
    }

    .text-section {
        flex: 1; 
        margin-right: 20px;

    }

    .image-section {
    flex: 1; 
    display: flex;
    justify-content: center;
    align-items: center;
}

    .text-section p {
        font-size: 1.2rem;
        margin-bottom: 20px;
        margin-right: 200px;
    }

    .search-bar {
        display: flex;
    }

    .search-input {
        padding: 10px;
        flex: 1;
        border-radius: 5px 0 0 5px;
        border: 1px solid #ddd;
    }

    .btn-search {
        padding: 10px 20px;
        background-color: #e63946;
        color: #fff;
        border: none;
        border-radius: 0 5px 5px 0;
        cursor: pointer;
    }

        .btn-search:hover {
            background-color: #d32f2f;
        }

    .landing-image {
        width: 650px;
        height: 500px; 
        max-width: 800px;
        object-fit: cover;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }


    .additional-section {
        background-color: #222222;
        color: #ffffff;
        padding: 50px 0;
        margin: 20px 0;
    }

    .additional-image {
        width: 100%;
        border-radius: 10px;
    }

    .text-content {
        padding: 20px;
    }

    .community-section {
        background-color: #333333;
        color: #ffffff;
        padding: 50px 0;
    }

    /* Base form group styling */
    .mb-3 {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 1rem;
    }

        .mb-3 label {
            flex: 0 0 100px;
            text-align: right;
            line-height: 1;
            margin: 0;
        }

        .mb-3 input,
        .mb-3 textarea {
            flex: 1;
            height: 40px;
            padding: 5px 10px;
            box-sizing: border-box;
        }

    .feedback-container {
        position: relative;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 50px;
    }

    .feedback-slider {
        overflow: hidden;
        position: relative;
    }

    .feedback-track {
        display: flex;
        transition: transform 0.5s ease-in-out;
        gap: 20px;
    }

    .feedback-card {
        flex: 0 0 calc(33.333% - 14px);
        min-width: calc(33.333% - 14px);
        background-color: #444444;
        color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        position: relative;
    }

    .nav-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background-color: #e63946;
        color: white;
        border: none;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
        z-index: 10;
        display: none;
    }

        .nav-btn:hover {
            background-color: #d32f2f;
        }

        .nav-btn:disabled {
            background-color: #888;
            cursor: not-allowed;
        }

    .prev-btn {
        left: 0;
    }

    .next-btn {
        right: 0;
    }

    .btn-cta {
        background-color: #e63946;
        color: #fff;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        display: inline-block;
    }

        .btn-cta:hover {
            background-color: #d32f2f;
            color: #fff;
            text-decoration: none;
        }

    .btn-browse-books {
        padding: 10px 20px;
        background-color: #e63946;
        color: #fff;
        border: none;
        border-radius: 5px;
        text-decoration: none;
        cursor: pointer;
        font-size: 1rem;
        display: inline-block;
    }

        .btn-browse-books:hover {
            background-color: #d32f2f;
            color: #fff;
            text-decoration: none;
        }

    /* Smaller input boxes */
    .small-input {
        max-width: 300px;
    }

    .rating-stars {
        display: flex;
        flex-direction: row-reverse;
        justify-content: flex-end;
        gap: 50px; 
        margin: 0 auto;
        width: 100%;
        max-width: 300px; 
        padding: 0;
    }

        .rating-stars input[type="radio"] {
            display: none;
        }

        .rating-stars label {
            font-size: 2rem; 
            color: #ddd;
            cursor: pointer;
            transition: color 0.2s;
            margin: 0; 
            padding: 0; 
            flex: 0 0 auto; 
            text-align: center; 
            width: 20px; 
        }

            .rating-stars label:before {
                content: '★'; /* Use a star symbol */
                display: inline-block;
                width: 20px; /* Matches the width of the label */
                text-align: center;
            }

            /* Hover effects */
            .rating-stars label:hover:before,
            .rating-stars label:hover ~ label:before {
                color: #e63946;
            }

        .rating-stars input[type="radio"]:checked ~ label:before {
            color: #e63946;
        }

    /* Clicked states */
    #star1:checked ~ label[for="star1"]:before {
        color: #e63946;
    }

    #star2:checked ~ label[for="star1"]:before,
    #star2:checked ~ label[for="star2"]:before {
        color: #e63946;
    }

    #star3:checked ~ label[for="star1"]:before,
    #star3:checked ~ label[for="star2"]:before,
    #star3:checked ~ label[for="star3"]:before {
        color: #e63946;
    }

    #star4:checked ~ label[for="star1"]:before,
    #star4:checked ~ label[for="star2"]:before,
    #star4:checked ~ label[for="star3"]:before,
    #star4:checked ~ label[for="star4"]:before {
        color: #e63946;
    }

    #star5:checked ~ label[for="star1"]:before,
    #star5:checked ~ label[for="star2"]:before,
    #star5:checked ~ label[for="star3"]:before,
    #star5:checked ~ label[for="star4"]:before,
    #star5:checked ~ label[for="star5"]:before {
        color: #e63946;
    }

    /* Feedback form adjustments for centering */
    .feedback-form {
        margin: 30px auto;
        background-color: #222222;
        padding: 20px;
        border-radius: 10px;
        color: #ffffff;
        max-width: 600px;
        text-align: center;
    }

        .feedback-form .form-label {
            text-align: left;
            display: block;
            margin-bottom: 5px;
        }

        .feedback-form input,
        .feedback-form textarea {
            margin: 0 auto;
            display: block;
        }

    .btn-primary {
        background-color: #e63946;
        border: none;
    }

        .btn-primary:hover {
            background-color: #d32f2f;
        }

    .card {
        position: relative;
        padding: 20px;
        border-radius: 10px;
        background-color: #444444;
        color: #ffffff;
        margin-bottom: 20px;
    }

    .delete-feedback-btn {
        background-color: transparent;
        color: red;
        border: none;
        font-size: 1.2rem;
        font-weight: bold;
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
    }

        .delete-feedback-btn:hover {
            color: darkred;
        }

    .nav-btn {
        width: 30px;
        height: 30px;
        font-size: 14px;
    }

    .feedback-container {
        padding: 0 35px;
    }

    }


</style>

